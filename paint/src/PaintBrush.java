
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Vector;
import sun.java2d.loops.DrawLine;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author azza
 */
public class PaintBrush extends java.applet.Applet {

    /**
     * Initializes the applet NewApplet
     */
    Shapes gColor;
    Color c;
    public final static int LINE = 0, FREEHAND = 1, RECT = 2, CIRCLE = 3;
    //Line lines; Rect rectangles; Cirlce circls;
    int mood;
    boolean fill = false;
    int x1, y1, x2, y2;
    boolean flag = false;
    Vector<Shapes> s;
    int count;

    public void init() {
        setSize(900, 600);
        setFocusable(true);
        s = new Vector<Shapes>();
        count = 0;
        this.addMouseMotionListener(new MyMouseListener());
        this.addMouseListener(new MyMouseListener());
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    initComponents();
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void paint(Graphics g) {
        for (Shapes sh : s) {
            //g.setColor(gColor.getColor());
            sh.draw(g);
        }
        switch (mood) {
            case LINE:
                g.setColor(c);
                g.drawLine(x1, y1, x2, y2);
                break;
            case RECT:
                g.setColor(c);
                g.drawRect(x1, y1, Math.abs(x2 - x1), Math.abs(y2 - y1));
                break;
            case CIRCLE:
                g.setColor(c);
                g.drawOval(x1, y1, Math.abs(x2 - x1), Math.abs(y2 - y1));
                break;

        }
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPanel = new java.awt.Panel();
        redBtn = new java.awt.Button();
        blueBtn = new java.awt.Button();
        Fill = new java.awt.Checkbox();
        yellowBtn = new java.awt.Button();
        orangeBtn = new java.awt.Button();
        GrayBtn = new java.awt.Button();
        blackBtn = new java.awt.Button();
        greenBtn = new java.awt.Button();
        magentaBtn = new java.awt.Button();
        cyanBtn = new java.awt.Button();
        pinkBtn = new java.awt.Button();
        lineBtn = new java.awt.Button();
        rectBtn = new java.awt.Button();
        circleBtn = new java.awt.Button();
        freeHandBtn = new java.awt.Button();
        Eraser = new java.awt.Button();

        setLayout(new java.awt.BorderLayout());

        controlPanel.setBackground(new java.awt.Color(153, 153, 255));
        controlPanel.setMaximumSize(new java.awt.Dimension(257, 485));
        controlPanel.setPreferredSize(new java.awt.Dimension(150, 600));

        redBtn.setBackground(new java.awt.Color(255, 0, 0));
        redBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redBtnActionPerformed(evt);
            }
        });

        blueBtn.setBackground(java.awt.Color.blue);
        blueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueBtnActionPerformed(evt);
            }
        });

        Fill.setLabel("Fill Shape");
        Fill.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                FillItemStateChanged(evt);
            }
        });

        yellowBtn.setBackground(new java.awt.Color(255, 255, 0));
        yellowBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yellowBtnActionPerformed(evt);
            }
        });

        orangeBtn.setBackground(java.awt.Color.orange);
        orangeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orangeBtnActionPerformed(evt);
            }
        });

        GrayBtn.setBackground(java.awt.Color.gray);
        GrayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GrayBtnActionPerformed(evt);
            }
        });

        blackBtn.setBackground(java.awt.Color.black);
        blackBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        blackBtn.setForeground(java.awt.Color.white);
        blackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackBtnActionPerformed(evt);
            }
        });

        greenBtn.setBackground(java.awt.Color.green);
        greenBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenBtnActionPerformed(evt);
            }
        });

        magentaBtn.setBackground(java.awt.Color.magenta);
        magentaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                magentaBtnActionPerformed(evt);
            }
        });

        cyanBtn.setBackground(java.awt.Color.cyan);
        cyanBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cyanBtnActionPerformed(evt);
            }
        });

        pinkBtn.setBackground(java.awt.Color.pink);
        pinkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pinkBtnActionPerformed(evt);
            }
        });

        lineBtn.setLabel("Line");
        lineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineBtnActionPerformed(evt);
            }
        });

        rectBtn.setLabel("Rectangle");
        rectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectBtnActionPerformed(evt);
            }
        });

        circleBtn.setLabel("Circle");
        circleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleBtnActionPerformed(evt);
            }
        });

        freeHandBtn.setLabel("Free Hand");

        Eraser.setLabel("Eraser");

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pinkBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(redBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cyanBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(greenBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(blueBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(GrayBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(magentaBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(2, 2, 2)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(yellowBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                        .addComponent(blackBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(orangeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63))
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Fill, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lineBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(circleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(freeHandBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Eraser, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(redBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blueBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yellowBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GrayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pinkBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cyanBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(magentaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orangeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(greenBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Fill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lineBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(circleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(freeHandBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(Eraser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(129, Short.MAX_VALUE))
        );

        add(controlPanel, java.awt.BorderLayout.EAST);
    }// </editor-fold>//GEN-END:initComponents

    private void redBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redBtnActionPerformed
        c = Color.red;// TODO add your handling code here:
    }//GEN-LAST:event_redBtnActionPerformed

    private void blueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueBtnActionPerformed
        c = Color.blue; // TODO add your handling code here:
    }//GEN-LAST:event_blueBtnActionPerformed

    private void yellowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yellowBtnActionPerformed
        c = Color.yellow;        // TODO add your handling code here:
    }//GEN-LAST:event_yellowBtnActionPerformed

    private void orangeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orangeBtnActionPerformed
        c = Color.orange;        // TODO add your handling code here:
    }//GEN-LAST:event_orangeBtnActionPerformed

    private void GrayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GrayBtnActionPerformed
        c = Color.gray;        // TODO add your handling code here:
    }//GEN-LAST:event_GrayBtnActionPerformed

    private void pinkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pinkBtnActionPerformed
        c = Color.pink;        // TODO add your handling code here:
    }//GEN-LAST:event_pinkBtnActionPerformed

    private void blackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackBtnActionPerformed
        c = Color.black;        // TODO add your handling code here:
    }//GEN-LAST:event_blackBtnActionPerformed

    private void greenBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenBtnActionPerformed
        c = Color.green;        // TODO add your handling code here:
    }//GEN-LAST:event_greenBtnActionPerformed

    private void cyanBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cyanBtnActionPerformed
        c = Color.cyan;        // TODO add your handling code here:
    }//GEN-LAST:event_cyanBtnActionPerformed

    private void magentaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_magentaBtnActionPerformed
        c = Color.magenta;        // TODO add your handling code here:
    }//GEN-LAST:event_magentaBtnActionPerformed

    private void lineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineBtnActionPerformed
        mood = LINE;
        // TODO add your handling code here:
    }//GEN-LAST:event_lineBtnActionPerformed

    private void rectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectBtnActionPerformed
        mood = RECT;
        // TODO add your handling code here:
    }//GEN-LAST:event_rectBtnActionPerformed

    private void circleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleBtnActionPerformed
        mood = CIRCLE;
        // TODO add your handling code here:
    }//GEN-LAST:event_circleBtnActionPerformed

    private void FillItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_FillItemStateChanged
        fill = true; // TODO add your handling code here:
    }//GEN-LAST:event_FillItemStateChanged
    class MyMouseListener extends MouseAdapter {

        public void mouseDragged(MouseEvent e) {

            if (flag) {
                if(e.getX()<=getWidth()-150){
                x2 = e.getX();

                y2 = e.getY();
                repaint();
                }
            }
        }

        public void mousePressed(MouseEvent e) {
           if(e.getX()<=getWidth()-150){
            x1 = e.getX();
            y1 = e.getY();

            flag = true;
           }
        }

        public void mouseReleased(MouseEvent e) {
            switch (mood) {
                case LINE:
                    Line lines = new Line();
                    lines.setX1(x1);
                    lines.setY1(y1);
                    lines.setX2(x2);
                    lines.setY2(y2);
                    lines.setgColor(c);
                    s.add(lines);
                    flag = false;
                    count++;
                    break;
                case RECT:
                    Rect rectangles = new Rect();
                    rectangles.setX1(x1);
                    rectangles.setX2(x2);
                    rectangles.setY1(y1);
                    rectangles.setY2(y2);
                    rectangles.setgColor(c);
                    //rectangles.setFillAtr(fill);
                    s.add(rectangles);
                    flag = false;
                    count++;
                    break;
                case CIRCLE:
                    Cirlce circls = new Cirlce();
                    circls.setX1(x1);
                    circls.setX2(x2);
                    circls.setY1(y1);
                    circls.setY2(y2);
                    circls.setgColor(c);
                    s.add(circls);
                    flag = false;
                    count++;
                    break;
            }
        }
    }

    abstract class Shapes {

        public Color gColor;
        public boolean fillAtr;

        public boolean isFillAtr() {
            return fillAtr;
        }

        public void setFillAtr(boolean fillAtr) {
            this.fillAtr = fillAtr;
        }

        // public Graphics gDraw;
        abstract public void draw(Graphics gDraw);

        public Color getgColor() {
            return gColor;
        }

        public void setgColor(Color gColor) {
            this.gColor = gColor;
        }
    }

    class Rect extends Shapes {

        private int x1, x2, y1, y2;
        //private Graphics g;

        void setX1(int x) {

            x1 = x;
        }

        void setX2(int x) {
            x2 = x;
        }

        void setY1(int y) {
            y1 = y;
        }

        void setY2(int y) {
            y2 = y;
        }

        int getX1() {
            return x1;
        }

        int getX2() {
            return x2;
        }

        int getY1() {
            return y1;
        }

        int getY2() {
            return y2;

        }

        public void draw(Graphics gDraw) {
            gDraw.setColor(getgColor());
            if (fill) {
                gDraw.fillRect(getX1(), getY1(), Math.abs(getX2() - getX1()), Math.abs(getY2() - getY1()));

            } else {
                gDraw.drawRect(getX1(), getY1(), Math.abs(getX2() - getX1()), Math.abs(getY2() - getY1()));
            }
        }
    }

    class Line extends Shapes {

        private int x1, x2, y1, y2;
        //private Graphics g;

        public void setX1(int x) {

            x1 = x;
        }

        void setX2(int x) {
            x2 = x;
        }

        void setY1(int y) {
            y1 = y;
        }

        void setY2(int y) {
            y2 = y;
        }

        int getX1() {
            return x1;
        }

        int getX2() {
            return x2;
        }

        int getY1() {
            return y1;
        }

        int getY2() {
            return y2;

        }

        public void draw(Graphics gDraw) {
            gDraw.setColor(getgColor());
            gDraw.drawLine(getX1(), getY1(), getX2(), getY2());
        }
    }

    class Cirlce extends Shapes {

        private int x1, x2, y1, y2;
        //private Graphics g;

        void setX1(int x) {

            x1 = x;
        }

        void setX2(int x) {
            x2 = x;
        }

        void setY1(int y) {
            y1 = y;
        }

        void setY2(int y) {
            y2 = y;
        }

        int getX1() {
            return x1;
        }

        int getX2() {
            return x2;
        }

        int getY1() {
            return y1;
        }

        int getY2() {
            return y2;

        }

        public void draw(Graphics gDraw) {
            gDraw.setColor(getgColor());
            if (fill) {
                gDraw.fillOval(getX1(), getY1(), Math.abs(getX2() - getX1()), Math.abs(getY2() - getY1()));
            } else {
                gDraw.drawOval(getX1(), getY1(), Math.abs(getX2() - getX1()), Math.abs(getY2() - getY1()));
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button Eraser;
    private java.awt.Checkbox Fill;
    private java.awt.Button GrayBtn;
    private java.awt.Button blackBtn;
    private java.awt.Button blueBtn;
    private java.awt.Button circleBtn;
    private java.awt.Panel controlPanel;
    private java.awt.Button cyanBtn;
    private java.awt.Button freeHandBtn;
    private java.awt.Button greenBtn;
    private java.awt.Button lineBtn;
    private java.awt.Button magentaBtn;
    private java.awt.Button orangeBtn;
    private java.awt.Button pinkBtn;
    private java.awt.Button rectBtn;
    private java.awt.Button redBtn;
    private java.awt.Button yellowBtn;
    // End of variables declaration//GEN-END:variables
}
